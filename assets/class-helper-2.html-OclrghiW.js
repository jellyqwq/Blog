import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,b as n,d as s,e as t,a as e}from"./app-XoEOURcT.js";const l={},u=e(`<p>2022年5月7日的早八，我突然想到了解决微信客户端内置浏览器可以打开网页，但在默认浏览器打不开问题的办法。</p><h3 id="_1-0回顾" tabindex="-1"><a class="header-anchor" href="#_1-0回顾" aria-hidden="true">#</a> 1.0回顾</h3><p>1.0版本时我想过两种获取学校课表的办法，第一种是从学校官网获取课表及其调课信息，但是在做2.0的时我发候现，学校官网的调课信息存在滞后的问题；第二种是从学校公众号的课表里获取，但是这种方法在做1.0时我发现了其链接在电脑的浏览器上没能打开，显示请在微信客户端打开，当时我搜索的方式不对，没能找到正确的解决办法。</p><h3 id="奇思妙想" tabindex="-1"><a class="header-anchor" href="#奇思妙想" aria-hidden="true">#</a> 奇思妙想</h3><p>今天思考着为什么微信的内置浏览器可以打开的链接为什么到默认浏览器就打不开了呢？他是怎么知道我不是用微信的客户端访问的呢？都是同一个链接访问，到默认浏览器就被重定向了。我想起请求头（Request Headers），对url请求资源肯定离不开请求头，爬虫第一课教的就是UA伪装，但讲到的大都是伪装浏览器，不让服务器检测到是爬虫的请求。但我现在觉得，UA更重要的是去模拟客户端，完成对客户端的请求。</p><p>在2.0版本中，使用了微信客户端独有的UA去请求，完成了对微信内浏览器的请求模拟，获取到了学校课表的api。</p><p>所以在2.0中，只需完成邮箱注册，并填写学号（xd）和身份识别字符串（openid）即可开启课表推送服务，在2.0中为了避免1.0在本地的跑python既不美观也难兼容的问题，决定改到web端操作，主要是不需要去填写课表了。在数据的结构处理上，1.0需要班级课表文件和个人配置文件，但在2.0将改为MongoDB数据库存储账号及其配置。暂时就想到这么个架构。</p><h3 id="实践过程" tabindex="-1"><a class="header-anchor" href="#实践过程" aria-hidden="true">#</a> 实践过程</h3><p>首先，考虑到项目的兼容性和体量，不打算用requests模块，用原生urllib库完成网络资源的请求。这里对urllib的post请求过程封装到一个函数当中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">urllibpost</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">|</span> <span class="token boolean">None</span><span class="token punctuation">,</span> headers<span class="token punctuation">:</span> <span class="token builtin">dict</span> <span class="token operator">|</span> <span class="token boolean">None</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token builtin">dict</span> <span class="token operator">|</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span> <span class="token operator">|</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
    <span class="token string">&#39;A post method by urllib&#39;</span>
    data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>
                                data<span class="token operator">=</span>data<span class="token punctuation">,</span>
                                headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>
                                method<span class="token operator">=</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> <span class="token string">&#39;url is invalid&#39;</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">:</span> response<span class="token punctuation">.</span>status<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="请求标头和请求参数" tabindex="-1"><a class="header-anchor" href="#请求标头和请求参数" aria-hidden="true">#</a> 请求标头和请求参数</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;Accept-Encoding&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;gzip, deflate&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Accept-Language&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;en-US,en;q=0.9,zh-US;q=0.8,zh-CN;q=0.7,zh;q=0.6,ja-CN;q=0.5,ja;q=0.4&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Cache-Control&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;no-cache&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Connection&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;keep-alive&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;application/x-www-form-urlencoded; charset=UTF-8&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Host&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;wecat.hnkjedu.cn&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Origin&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;http://wecat.hnkjedu.cn&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Pragma&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;no-cache&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;X-Requested-With&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;XMLHttpRequest&#39;</span>
<span class="token punctuation">}</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;openid&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;xh&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;falg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;true&#39;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在微信的公众号的课表当中（红色方框中）可以获取该页链接。链接具体长下面这样，这样可以拿到自己的xh（xuehao）和openid了。</p>`,13),r={href:"http://wecat.hnkjedu.cn/kingojw/xskb.aspx?xh=%E5%AD%A6%E5%8F%B7&openid=%E8%BA%AB%E4%BB%BDid",target:"_blank",rel:"noopener noreferrer"},d=e(`<figure><img src="https://cdn.jsdelivr.net/gh/jellyqwq/PictureBed@main/2022/8/98fd3f8d09e0b503b7712e2fffe0c7b966dbc65d1a15b1a62446e1aa84783384.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="请求部分写法" tabindex="-1"><a class="header-anchor" href="#请求部分写法" aria-hidden="true">#</a> 请求部分写法</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url <span class="token operator">=</span> <span class="token string">&#39;http://wecat.hnkjedu.cn/kingojw/xskbjson.aspx&#39;</span>
response <span class="token operator">=</span> urllibpost<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>data<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token string">&#39;error&#39;</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>
    log<span class="token punctuation">.</span>error<span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> response<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;courseTimeXq&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    log<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&#39;params openid or xh is invalid&#39;</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># 此处即json的输出</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就要对课表进行解析了，课表的数据结构需要从星期开始读取，一星期7天分别为Kn(n∈N+,n≤7)，那么如何计算今天是星期几呢，这里采用datetime模块中的datetime类，并通过datetime.today().isoweekday()获取当天的星期几的整型表示。</p><hr>`,5),k={href:"https://www.mongodb.com/",target:"_blank",rel:"noopener noreferrer"},v=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`pip install --upgrade pymongo
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),m={href:"https://www.runoob.com/python3/python-mongodb.html",target:"_blank",rel:"noopener noreferrer"},g=e(`<ol><li>MongoDB安装后是全局作用的，不用可以装到哪个目录下</li><li>安装后要添加bin文件到系统的环境变量当中</li><li>在bin目录下的mongod.cfg文件当中可以指定数据库访问的端口</li></ol><h4 id="细读后发现-当安装目录没有data和log的时候才需要进行下列操作" tabindex="-1"><a class="header-anchor" href="#细读后发现-当安装目录没有data和log的时候才需要进行下列操作" aria-hidden="true">#</a> 细读后发现，当安装目录没有data和log的时候才需要进行下列操作</h4><p>首先需要创建一个data目录，但是并不像教程里所讲的需要在根目录创建，在data目录中又要创建又有一个db目录（用于存放数据库的）和一个log目录（存放日志的），当mongodb的bin目录添加到环境变量当中，执行下列命令以初始化数据库，–dbpath正如字面意思，指定一个数据库目录的路径，后面的路径可以为用相对路径。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mongod --dbpath data\\db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后创建一个文件mongod.cfg，存哪都行，里面如下配置，path和dbPath都需要使用绝对路径，这里我把mongod.cfg放在了data中以方便我管理。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>systemLog:
    destination: file
    path: D:\\Desktop\\class-plan\\data\\log\\mongod.log
storage:
    dbPath: D:\\Desktop\\class-plan\\data\\db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后安装MongoDB服务，mongod.exe和上面的mongod一样，添加了环境变量即可使用，通过–config参数来指定数据库配置文件的路径，这个路径需要使用绝对路径，–install参数安装服务。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mongod.exe --config &quot;D:\\Desktop\\class-plan\\data\\mongod.cfg&quot; --install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>插入：启动/关闭/移除MongoDB服务的操作</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>net start MongoDB
net stop MongoDB
mongod.exe --remove
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),b={href:"https://github.com/jellyqwq/class-helper/blob/main/class_helper/__init__.py#L63",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/jellyqwq/class-helper/blob/main/class_helper/example.config.json",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>接着就是重头戏——api的搭建了，我这里先罗列下要做的api及其功能</p><ol><li>/user/signup 注册，将邮箱密码和用户名上传到服务器验证</li><li>/sendvcode 发送验证码</li><li>/emailexist 检查邮箱是否被注册过</li></ol><p>创建账号的实现</p><div class="language-flow line-numbers-mode" data-ext="flow"><pre class="language-flow"><code>email<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 邮箱是否存在
error<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 返回error
make<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 生成验证码
cache<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 缓存验证码
send<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 发送验证码
fill<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 用户填写验证码
check<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 校验是否正确
create<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 创建账号

<span class="token function">email</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>error
<span class="token function">email</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>make
<span class="token function">make</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>cache
<span class="token function">cache</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>send
<span class="token function">send</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>fill
<span class="token function">fill</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>check
<span class="token function">check</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>create
<span class="token function">check</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>make
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="web端" tabindex="-1"><a class="header-anchor" href="#web端" aria-hidden="true">#</a> web端</h3><p>在web使用post请求时，发现请求不到后台的api数据，显示如下</p><p>Browser Console</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Access to XMLHttpRequest at &#39;http://localhost:4443/test&#39; from origin &#39;http://127.0.0.1:4443&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.
POST http://localhost:4443/test net::ERR_FAILED 200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>DOM-jQuery</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// post</span>
        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:4443/test&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string-property property">&#39;email&#39;</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token string-property property">&#39;pwd&#39;</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#pwd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">&#39;succeed&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flask-localhost:4443</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/test&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>request<span class="token punctuation">.</span>content_type<span class="token punctuation">)</span>
    email <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span>
    log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>email<span class="token punctuation">)</span>
    pwd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">&#39;pwd&#39;</span><span class="token punctuation">]</span>
    log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;succeed&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;返回成功&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过控制台的报错提示可以知道，在js发出post的跨域资源请求时返回的资源没有<code>Access-Control-Allow-Origin</code>这个头部，导致获取响应资源失败。通过查询找到了解决办法，在flask中可以通过flask.make_response(*args)来生成一个响应对象，这个对象可以设置<code>Response Headers</code>的参数，可以通过<code>response[key] = value</code>来设置，或者用response对象的相应属性来修改。</p><p>那么，我把解决的方法封装到了函数当中，如下。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 请求头的设置</span>
<span class="token keyword">def</span> <span class="token function">res</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> make_response<span class="token punctuation">(</span>params<span class="token punctuation">)</span>
    response<span class="token punctuation">.</span>access_control_allow_origin <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:4443&#39;</span>
    <span class="token keyword">return</span> response
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flask中修改为</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/test&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>request<span class="token punctuation">.</span>content_type<span class="token punctuation">)</span>
    email <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span>
    log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>email<span class="token punctuation">)</span>
    pwd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">&#39;pwd&#39;</span><span class="token punctuation">]</span>
    log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>
    response <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;succeed&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;返回成功&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    response<span class="token punctuation">.</span>access_control_allow_origin <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:4443&#39;</span>
    <span class="token keyword">return</span> response
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function y(w,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[s("http://wecat.hnkjedu.cn/kingojw/xskb.aspx?xh=学号&openid=身份id"),t(a)])])]),d,n("p",null,[s("接着，先处理下数据库的问题，这里选择MongoDB数据库，MongoDB适合高迸发，可以提高服务端性能，也是为了后面对服务端可能进行的的go重构——咕咕，去"),n("a",k,[s("MongoDB"),t(a)]),s("下载，python也需要安装相应的第三方包pymongo来实现对数据库的访问。")]),v,n("p",null,[s("把mongodb下好后，对于windows需要先创建数据库，这里参考了菜鸟教程的"),n("a",m,[s("安装"),t(a)]),s("，我也自己总结下吧。")]),g,n("p",null,[s("好，回到项目当中，添加一个验证码的生成函数，至于要不要图还有待考虑，然后还有一个"),n("a",b,[s("发送验证码的函数"),t(a)]),s("。")]),n("p",null,[s("这次吸取1.0的经验，把所有需要配置的参数和个性化定制全部独立到配置文件当中，所以在2.0中多了一个"),n("a",h,[s("example.config.json"),t(a)]),s("的配置文件。")]),f])}const j=p(l,[["render",y],["__file","class-helper-2.html.vue"]]);export{j as default};
